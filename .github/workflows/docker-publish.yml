name: Publish Docker Images

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (v1.0.0, v2.1.3, etc.)
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository }}/backend
  IMAGE_GRAFANA: ghcr.io/${{ github.repository }}/grafana-plugin
  IMAGE_PLUGIN_INIT: ghcr.io/${{ github.repository }}/plugin-init

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: fluo
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
          skipPush: ${{ github.event_name == 'pull_request' }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BACKEND }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Grafana plugin
        id: meta-grafana
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_GRAFANA }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for plugin init
        id: meta-plugin
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PLUGIN_INIT }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build FLUO packages
        run: |
          echo "üî® Building FLUO packages..."
          nix build .#backend --print-build-logs
          nix build .#grafana-plugin --print-build-logs || echo "Grafana plugin build skipped (may not exist yet)"

      - name: Build Backend Docker Image
        working-directory: distribution/docker
        run: |
          echo "üêã Building backend Docker image..."
          nix build .#backend-docker --print-build-logs
          docker load < result

          # Tag with version
          VERSION="${{ steps.meta-backend.outputs.version }}"
          docker tag betrace-backend:latest ${{ env.IMAGE_BACKEND }}:${VERSION}
          docker tag betrace-backend:latest ${{ env.IMAGE_BACKEND }}:latest

      - name: Build Grafana Plugin Docker Image
        working-directory: distribution/docker
        run: |
          echo "üêã Building Grafana plugin Docker image..."
          nix build .#grafana-with-plugin --print-build-logs
          docker load < result

          # Tag with version
          VERSION="${{ steps.meta-grafana.outputs.version }}"
          docker tag betrace-grafana-plugin:latest ${{ env.IMAGE_GRAFANA }}:${VERSION}
          docker tag betrace-grafana-plugin:latest ${{ env.IMAGE_GRAFANA }}:latest

      - name: Build Plugin Init Docker Image
        working-directory: distribution/docker
        run: |
          echo "üêã Building plugin init Docker image..."
          nix build .#plugin-init --print-build-logs
          docker load < result

          # Tag with version
          VERSION="${{ steps.meta-plugin.outputs.version }}"
          docker tag betrace-plugin-init:latest ${{ env.IMAGE_PLUGIN_INIT }}:${VERSION}
          docker tag betrace-plugin-init:latest ${{ env.IMAGE_PLUGIN_INIT }}:latest

      - name: Push Backend Image
        run: |
          echo "üì§ Pushing backend image..."
          VERSION="${{ steps.meta-backend.outputs.version }}"
          docker push ${{ env.IMAGE_BACKEND }}:${VERSION}
          docker push ${{ env.IMAGE_BACKEND }}:latest

      - name: Push Grafana Plugin Image
        run: |
          echo "üì§ Pushing Grafana plugin image..."
          VERSION="${{ steps.meta-grafana.outputs.version }}"
          docker push ${{ env.IMAGE_GRAFANA }}:${VERSION}
          docker push ${{ env.IMAGE_GRAFANA }}:latest

      - name: Push Plugin Init Image
        run: |
          echo "üì§ Pushing plugin init image..."
          VERSION="${{ steps.meta-plugin.outputs.version }}"
          docker push ${{ env.IMAGE_PLUGIN_INIT }}:${VERSION}
          docker push ${{ env.IMAGE_PLUGIN_INIT }}:latest

      - name: Generate image attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.IMAGE_BACKEND }}
          subject-digest: ${{ steps.meta-backend.outputs.digest }}
          push-to-registry: true

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          body: |
            ## Docker Images Published

            - **Backend**: `${{ env.IMAGE_BACKEND }}:${{ steps.meta-backend.outputs.version }}`
            - **Grafana Plugin**: `${{ env.IMAGE_GRAFANA }}:${{ steps.meta-grafana.outputs.version }}`
            - **Plugin Init**: `${{ env.IMAGE_PLUGIN_INIT }}:${{ steps.meta-plugin.outputs.version }}`

            ### Quick Start
            ```bash
            docker pull ${{ env.IMAGE_BACKEND }}:${{ steps.meta-backend.outputs.version }}
            docker pull ${{ env.IMAGE_GRAFANA }}:${{ steps.meta-grafana.outputs.version }}
            ```

            See [Docker Distribution README](distribution/docker/README.md) for usage instructions.
