name: RC Test Suite

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC
  push:
    tags:
      - 'v*' # Trigger on version tags

jobs:
  rc-tests:
    name: Release Candidate Tests
    runs-on: ubuntu-latest
    timeout-minutes: 180 # 3 hours

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Start test environment
        run: |
          cd tests/rc-suite
          docker-compose up -d
          echo "Waiting for services to be healthy..."
          sleep 60

      - name: Check service health
        run: |
          cd tests/rc-suite
          make health

      - name: Run quick tests
        run: |
          cd tests/rc-suite
          go test -v -tags=rc -short ./scenarios/... -timeout=30m -json > reports/quick-tests.json

      - name: Run full test suite
        if: github.event_name == 'schedule' || startsWith(github.ref, 'refs/tags/')
        run: |
          cd tests/rc-suite
          go test -v -tags=rc ./scenarios/... -timeout=2h -json > reports/full-tests.json

      - name: Collect service logs
        if: failure()
        run: |
          cd tests/rc-suite
          docker-compose logs > reports/service-logs.txt

      - name: Stop test environment
        if: always()
        run: |
          cd tests/rc-suite
          docker-compose down -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rc-test-results
          path: tests/rc-suite/reports/
          retention-days: 30

      - name: Parse test results
        if: always()
        run: |
          cd tests/rc-suite/reports
          if [ -f "full-tests.json" ]; then
            TEST_FILE="full-tests.json"
          else
            TEST_FILE="quick-tests.json"
          fi

          TOTAL=$(grep -c '"Action":"pass"\|"Action":"fail"' $TEST_FILE || echo "0")
          PASSED=$(grep -c '"Action":"pass"' $TEST_FILE || echo "0")
          FAILED=$(grep -c '"Action":"fail"' $TEST_FILE || echo "0")

          echo "## RC Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Total: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: $FAILED" >> $GITHUB_STEP_SUMMARY

          if [ "$FAILED" -gt "0" ]; then
            exit 1
          fi

      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ RC Test Suite Failed',
              body: `The nightly RC test suite has failed.

              **Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}

              Please investigate and fix before the next release.`,
              labels: ['test-failure', 'rc-suite']
            });

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 240 # 4 hours
    if: github.event_name == 'schedule' # Only on nightly runs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Start test environment
        run: |
          cd tests/rc-suite
          docker-compose up -d
          sleep 60

      - name: Run performance tests
        run: |
          cd tests/rc-suite
          go test -v -tags=rc ./scenarios/06-performance -timeout=3h -json > reports/perf-tests.json

      - name: Stop test environment
        if: always()
        run: |
          cd tests/rc-suite
          docker-compose down -v

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: tests/rc-suite/reports/perf-tests.json
          retention-days: 90

      - name: Track performance metrics
        run: |
          echo "Performance benchmarks tracked in artifacts"
          # TODO: Parse metrics and track trends over time
