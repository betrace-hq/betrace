# BeTrace AWS KMS Terraform Module - Outputs

# KMS Key Outputs

output "kms_key_id" {
  description = "KMS key ID (e.g., 'abcd1234-5678-90ab-cdef-1234567890ab')"
  value       = aws_kms_key.betrace_master_key.key_id
}

output "kms_key_arn" {
  description = "KMS key ARN (use this in BeTrace backend configuration: aws.kms.master-key-id)"
  value       = aws_kms_key.betrace_master_key.arn
}

output "kms_key_alias" {
  description = "KMS key alias (e.g., 'alias/betrace-production')"
  value       = aws_kms_alias.betrace_master_key_alias.name
}

output "kms_key_alias_arn" {
  description = "KMS key alias ARN"
  value       = aws_kms_alias.betrace_master_key_alias.arn
}

# IAM Policy Outputs

output "iam_policy_arn" {
  description = "IAM policy ARN for BeTrace KMS access"
  value       = aws_iam_policy.betrace_kms_access.arn
}

output "iam_policy_name" {
  description = "IAM policy name for BeTrace KMS access"
  value       = aws_iam_policy.betrace_kms_access.name
}

# IAM Role Outputs (only if create_iam_role=true)

output "iam_role_arn" {
  description = "IAM role ARN for BeTrace backend (only if create_iam_role=true)"
  value       = var.create_iam_role ? aws_iam_role.betrace_backend[0].arn : null
}

output "iam_role_name" {
  description = "IAM role name for BeTrace backend (only if create_iam_role=true)"
  value       = var.create_iam_role ? aws_iam_role.betrace_backend[0].name : null
}

# Configuration Outputs (for BeTrace backend setup)

output "betrace_backend_config" {
  description = "BeTrace backend configuration snippet (copy to application.properties)"
  value = <<-EOT
    # BeTrace Backend - AWS KMS Configuration
    # Generated by Terraform module: terraform/aws-kms

    betrace.kms.provider=aws
    aws.kms.master-key-id=${aws_kms_key.betrace_master_key.arn}
    aws.kms.region=${data.aws_region.current.name}

    # Cache Configuration (PRD-006c)
    kms.cache.private-key-ttl-minutes=60
    kms.cache.public-key-ttl-hours=24
    kms.cache.max-size=1000

    # Key Rotation (PRD-006d)
    kms.rotation.enabled=true
    kms.rotation.max-age-days=90
  EOT
}

output "betrace_backend_env_vars" {
  description = "BeTrace backend environment variables (for Docker/Kubernetes deployments)"
  value = {
    BETRACE_KMS_PROVIDER          = "aws"
    AWS_KMS_MASTER_KEY_ID      = aws_kms_key.betrace_master_key.arn
    AWS_KMS_REGION             = data.aws_region.current.name
    KMS_CACHE_PRIVATE_KEY_TTL  = "60"
    KMS_CACHE_PUBLIC_KEY_TTL   = "1440"
    KMS_CACHE_MAX_SIZE         = "1000"
    KMS_ROTATION_ENABLED       = "true"
    KMS_ROTATION_MAX_AGE_DAYS  = "90"
  }
  sensitive = false
}

# Validation Outputs

output "validation_commands" {
  description = "Commands to validate KMS setup after deployment"
  value = <<-EOT
    # Test KMS key permissions
    aws kms describe-key --key-id ${aws_kms_key.betrace_master_key.arn}
    aws kms get-key-rotation-status --key-id ${aws_kms_key.betrace_master_key.arn}

    # Test data key generation (simulates BeTrace backend operation)
    aws kms generate-data-key \\
      --key-id ${aws_kms_key.betrace_master_key.arn} \\
      --key-spec AES_256 \\
      --encryption-context purpose=pii_redaction

    # Validate BeTrace backend health check
    curl http://localhost:8080/q/health/ready | jq '.checks[] | select(.name == "kms")'

    # Validate KMS configuration via admin API
    curl -X POST http://localhost:8080/api/admin/kms/validate | jq .
  EOT
}

# Cost Estimation Output

output "estimated_monthly_cost_usd" {
  description = "Estimated monthly AWS KMS cost (assuming 80% cache hit rate)"
  value = <<-EOT
    KMS Master Key: $1.00/month
    GenerateDataKey API calls: ~1,000/month @ $0.03/10k = $0.003
    Encrypt API calls: ~500/month @ $0.03/10k = $0.0015
    Decrypt API calls: ~100/month @ $0.03/10k = $0.0003

    Total Estimated Cost: ~$1.00 - $3.00/month

    Note: Actual costs depend on cache hit rate and request volume.
    PRD-006c cache design targets >80% hit rate to minimize KMS API calls.
  EOT
}

# Security Outputs

output "security_checklist" {
  description = "Post-deployment security validation checklist"
  value = <<-EOT
    âœ… Security Checklist for BeTrace AWS KMS Integration:

    1. Key Rotation
       - [ ] Verify automatic key rotation is enabled: ${aws_kms_key.betrace_master_key.enable_key_rotation}
       - [ ] Confirm rotation period is 90 days (NIST 800-57 compliance)
       - [ ] Set up CloudWatch alarm for rotation failures

    2. IAM Permissions
       - [ ] Verify IAM policy grants minimum required permissions (least privilege)
       - [ ] Confirm encryption context enforcement is enabled: ${var.enforce_encryption_context}
       - [ ] Review CloudTrail logs for unauthorized KMS access attempts

    3. Key Policy
       - [ ] Verify only authorized principals can use the key
       - [ ] Confirm root account has admin access (required for key recovery)
       - [ ] Review key policy for overly permissive statements

    4. Monitoring
       - [ ] Set up CloudWatch metrics for KMS API call volume
       - [ ] Configure alerts for KMS throttling errors
       - [ ] Enable AWS Config to track key policy changes

    5. BeTrace Backend Validation
       - [ ] Run: curl http://localhost:8080/q/health/ready | jq '.checks[] | select(.name == "kms")'
       - [ ] Run: curl -X POST http://localhost:8080/api/admin/kms/validate
       - [ ] Verify cache hit rate >80% in production

    6. Compliance
       - [ ] Document KMS key ARN in SOC2 evidence repository
       - [ ] Add key rotation schedule to compliance calendar
       - [ ] Export KMS CloudTrail logs for auditor review
  EOT
}
