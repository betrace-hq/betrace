<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.fluo</groupId>
  <artifactId>fluo-backend</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <name>FLUO Backend V2</name>
  <description>Clean Architecture Backend with Camel Transformers</description>

  <properties>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <quarkus.platform.version>3.15.1</quarkus.platform.version>
    <camel.quarkus.version>3.15.0</camel.quarkus.version>
    <skipITs>true</skipITs>
    <surefire-plugin.version>3.5.0</surefire-plugin.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.quarkus.platform</groupId>
        <artifactId>quarkus-bom</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.camel.quarkus</groupId>
        <artifactId>camel-quarkus-bom</artifactId>
        <version>${camel.quarkus.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Core Quarkus dependencies -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-arc</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-hibernate-validator</artifactId>
    </dependency>

    <!-- Camel Quarkus dependencies -->
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-core</artifactId>
    </dependency>
    <!-- JWT for token validation - commented out for now as it's blocking tests -->
    <!--
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-jwt</artifactId>
    </dependency>
    -->
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-platform-http</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-rest</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-direct</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-bean</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-log</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-http</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-aws2-s3</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-caffeine</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-bean-validator</artifactId>
    </dependency>

    <!-- DuckDB for hot trace storage -->
    <dependency>
      <groupId>org.duckdb</groupId>
      <artifactId>duckdb_jdbc</artifactId>
      <version>0.9.2</version>
    </dependency>

    <!-- WorkOS SDK for authentication -->
    <dependency>
      <groupId>com.workos</groupId>
      <artifactId>workos</artifactId>
      <version>4.5.0</version>
    </dependency>

    <!-- Nimbus JOSE+JWT for JWT validation -->
    <dependency>
      <groupId>com.nimbusds</groupId>
      <artifactId>nimbus-jose-jwt</artifactId>
      <version>9.37.3</version>
    </dependency>

    <!-- Drools for trace-level rule evaluation -->
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-core</artifactId>
      <version>9.44.0.Final</version>
    </dependency>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-compiler</artifactId>
      <version>9.44.0.Final</version>
    </dependency>
    <dependency>
      <groupId>org.drools</groupId>
      <artifactId>drools-mvel</artifactId>
      <version>9.44.0.Final</version>
    </dependency>
    <dependency>
      <groupId>org.kie</groupId>
      <artifactId>kie-api</artifactId>
      <version>9.44.0.Final</version>
    </dependency>

    <!-- ASM for bytecode manipulation (sandbox agent) -->
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <version>9.7</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-commons</artifactId>
      <version>9.7</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-util</artifactId>
      <version>9.7</version>
    </dependency>

    <!-- Custom Camel Components (will be available)
    <dependency>
      <groupId>com.fluo.camel</groupId>
      <artifactId>camel-rule</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>com.fluo.camel</groupId>
      <artifactId>camel-tigerbeetle</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>com.fluo.camel</groupId>
      <artifactId>camel-tenant</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>com.fluo.camel</groupId>
      <artifactId>camel-signal</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>
    -->

    <!-- OpenTelemetry for Compliance Tracking -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-opentelemetry</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-sdk</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-exporter-otlp</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-exporter-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-micrometer-registry-prometheus</artifactId>
    </dependency>

    <!-- Scheduler for demo span generation -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-scheduler</artifactId>
    </dependency>

    <!-- Health and monitoring -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-health</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-micrometer</artifactId>
    </dependency>

    <!-- SmallRye Fault Tolerance for circuit breakers, timeouts, retries -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-fault-tolerance</artifactId>
    </dependency>

    <!-- Configuration -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-config-yaml</artifactId>
    </dependency>

    <!-- OpenTelemetry -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-opentelemetry</artifactId>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>4.2.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5-mockito</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>5.2.0</version>
      <scope>test</scope>
    </dependency>

    <!-- Temporarily keep OGNL for existing code during migration -->
    <dependency>
      <groupId>ognl</groupId>
      <artifactId>ognl</artifactId>
      <version>3.3.4</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.quarkus.platform</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.platform.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
              <goal>generate-code</goal>
              <goal>generate-code-tests</goal>
              <goal>native-image-agent</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.13.0</version>
        <configuration>
          <parameters>true</parameters>
          <release>21</release>
          <compilerArgs>
            <arg>--enable-preview</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <!-- Build separate agent JAR with shaded ASM dependencies -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.5.1</version>
        <executions>
          <execution>
            <id>agent-jar</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>agent</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Premain-Class>com.fluo.security.agent.SandboxAgent</Premain-Class>
                    <Agent-Class>com.fluo.security.agent.SandboxAgent</Agent-Class>
                    <Can-Redefine-Classes>true</Can-Redefine-Classes>
                    <Can-Retransform-Classes>true</Can-Retransform-Classes>
                  </manifestEntries>
                </transformer>
              </transformers>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <includes>
                    <include>com/fluo/security/agent/**</include>
                    <include>org/objectweb/asm/**</include>
                  </includes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire-plugin.version}</version>
        <configuration>
          <systemPropertyVariables>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
            <maven.home>${maven.home}</maven.home>
            <!-- Enable security tests (PRD-005 P0 requirement) -->
            <security.tests.enabled>true</security.tests.enabled>
          </systemPropertyVariables>
          <!-- Enable sandbox agent for bytecode-level security enforcement -->
          <argLine>@{argLine} --enable-preview -javaagent:${project.build.directory}/${project.build.finalName}-agent.jar</argLine>
          <!-- Use single fork to avoid DuckDB file locking conflicts -->
          <forkCount>1</forkCount>
          <reuseForks>true</reuseForks>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.11</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- PIT Mutation Testing -->
      <plugin>
        <groupId>org.pitest</groupId>
        <artifactId>pitest-maven</artifactId>
        <version>1.15.0</version>
        <dependencies>
          <dependency>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-junit5-plugin</artifactId>
            <version>1.2.1</version>
          </dependency>
        </dependencies>
        <configuration>
          <!-- Target security-critical classes -->
          <targetClasses>
            <param>com.fluo.security.*</param>
            <param>com.fluo.services.RateLimiter</param>
            <param>com.fluo.services.DuckDBService</param>
            <param>com.fluo.processors.RateLimitProcessor</param>
            <param>com.fluo.processors.BatchSizeValidator</param>
            <param>com.fluo.compliance.evidence.RedactionEnforcer</param>
            <param>com.fluo.compliance.evidence.ComplianceSpanSigner</param>
          </targetClasses>
          <targetTests>
            <param>com.fluo.security.*</param>
            <param>com.fluo.services.RateLimiter*Test</param>
            <param>com.fluo.services.DuckDBServiceTest</param>
            <param>com.fluo.compliance.evidence.*Test</param>
          </targetTests>
          <!-- Mutation score thresholds -->
          <mutationThreshold>70</mutationThreshold>
          <coverageThreshold>90</coverageThreshold>
          <!-- Output formats -->
          <outputFormats>
            <outputFormat>HTML</outputFormat>
            <outputFormat>XML</outputFormat>
          </outputFormats>
          <!-- Timeout for mutations (ms) -->
          <timeoutConstant>5000</timeoutConstant>
          <timeoutFactor>1.25</timeoutFactor>
          <!-- Number of threads (adjust based on CPU cores) -->
          <threads>4</threads>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- PIT Mutation Testing Profiles - Tiered by Security Criticality -->

    <!-- P0: Authentication Services (80% threshold) -->
    <profile>
      <id>pit-auth</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-maven</artifactId>
            <version>1.15.0</version>
            <dependencies>
              <dependency>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-junit5-plugin</artifactId>
                <version>1.2.1</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <id>pit-auth</id>
                <goals>
                  <goal>mutationCoverage</goal>
                </goals>
                <phase>test</phase>
              </execution>
            </executions>
            <configuration>
              <targetClasses>
                <param>com.fluo.services.WorkOSAuthService</param>
                <param>com.fluo.services.JwtValidatorService</param>
                <param>com.fluo.services.JwksService</param>
                <param>com.fluo.processors.auth.*</param>
              </targetClasses>
              <targetTests>
                <param>com.fluo.services.WorkOSAuthService*Test</param>
                <param>com.fluo.services.JwtValidatorService*Test</param>
                <param>com.fluo.services.JwksService*Test</param>
                <param>com.fluo.processors.auth.*Test</param>
              </targetTests>
              <mutationThreshold>80</mutationThreshold>
              <coverageThreshold>95</coverageThreshold>
              <outputFormats>
                <outputFormat>HTML</outputFormat>
                <outputFormat>XML</outputFormat>
              </outputFormats>
              <timeoutConstant>5000</timeoutConstant>
              <timeoutFactor>1.25</timeoutFactor>
              <threads>4</threads>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- P1: Security Components (75% threshold) -->
    <profile>
      <id>pit-security</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-maven</artifactId>
            <version>1.15.0</version>
            <dependencies>
              <dependency>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-junit5-plugin</artifactId>
                <version>1.2.1</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <id>pit-security</id>
                <goals>
                  <goal>mutationCoverage</goal>
                </goals>
                <phase>test</phase>
              </execution>
            </executions>
            <configuration>
              <targetClasses>
                <param>com.fluo.security.*</param>
                <param>com.fluo.services.RateLimiter</param>
                <param>com.fluo.services.DuckDBService</param>
                <param>com.fluo.processors.RateLimitProcessor</param>
                <param>com.fluo.processors.BatchSizeValidator</param>
                <param>com.fluo.compliance.evidence.RedactionEnforcer</param>
                <param>com.fluo.compliance.evidence.ComplianceSpanSigner</param>
              </targetClasses>
              <targetTests>
                <param>com.fluo.security.*Test</param>
                <param>com.fluo.services.RateLimiter*Test</param>
                <param>com.fluo.services.DuckDBServiceTest</param>
                <param>com.fluo.processors.RateLimitProcessorTest</param>
                <param>com.fluo.processors.BatchSizeValidatorTest</param>
                <param>com.fluo.compliance.evidence.*Test</param>
              </targetTests>
              <mutationThreshold>75</mutationThreshold>
              <coverageThreshold>90</coverageThreshold>
              <outputFormats>
                <outputFormat>HTML</outputFormat>
                <outputFormat>XML</outputFormat>
              </outputFormats>
              <timeoutConstant>5000</timeoutConstant>
              <timeoutFactor>1.25</timeoutFactor>
              <threads>4</threads>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- P2: Standard Components (70% threshold) -->
    <profile>
      <id>pit-all</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.pitest</groupId>
            <artifactId>pitest-maven</artifactId>
            <version>1.15.0</version>
            <dependencies>
              <dependency>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-junit5-plugin</artifactId>
                <version>1.2.1</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <id>pit-all</id>
                <goals>
                  <goal>mutationCoverage</goal>
                </goals>
                <phase>test</phase>
              </execution>
            </executions>
            <configuration>
              <targetClasses>
                <param>com.fluo.*</param>
              </targetClasses>
              <targetTests>
                <param>com.fluo.*Test</param>
              </targetTests>
              <excludedClasses>
                <!-- Exclude configuration/entities -->
                <param>com.fluo.models.*</param>
                <param>com.fluo.config.*</param>
                <param>com.fluo.Application</param>
              </excludedClasses>
              <mutationThreshold>70</mutationThreshold>
              <coverageThreshold>90</coverageThreshold>
              <outputFormats>
                <outputFormat>HTML</outputFormat>
                <outputFormat>XML</outputFormat>
              </outputFormats>
              <timeoutConstant>5000</timeoutConstant>
              <timeoutFactor>1.25</timeoutFactor>
              <threads>4</threads>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <properties>
        <skipITs>false</skipITs>
        <quarkus.native.enabled>true</quarkus.native.enabled>
      </properties>
    </profile>
  </profiles>
</project>