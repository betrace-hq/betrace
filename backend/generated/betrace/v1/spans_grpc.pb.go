// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: betrace/v1/spans.proto

package betrace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpanService_IngestSpans_FullMethodName = "/betrace.v1.SpanService/IngestSpans"
)

// SpanServiceClient is the client API for SpanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SpanService handles OpenTelemetry span ingestion
type SpanServiceClient interface {
	// IngestSpans accepts a batch of OpenTelemetry spans
	IngestSpans(ctx context.Context, in *IngestSpansRequest, opts ...grpc.CallOption) (*IngestSpansResponse, error)
}

type spanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpanServiceClient(cc grpc.ClientConnInterface) SpanServiceClient {
	return &spanServiceClient{cc}
}

func (c *spanServiceClient) IngestSpans(ctx context.Context, in *IngestSpansRequest, opts ...grpc.CallOption) (*IngestSpansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestSpansResponse)
	err := c.cc.Invoke(ctx, SpanService_IngestSpans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpanServiceServer is the server API for SpanService service.
// All implementations must embed UnimplementedSpanServiceServer
// for forward compatibility.
//
// SpanService handles OpenTelemetry span ingestion
type SpanServiceServer interface {
	// IngestSpans accepts a batch of OpenTelemetry spans
	IngestSpans(context.Context, *IngestSpansRequest) (*IngestSpansResponse, error)
	mustEmbedUnimplementedSpanServiceServer()
}

// UnimplementedSpanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpanServiceServer struct{}

func (UnimplementedSpanServiceServer) IngestSpans(context.Context, *IngestSpansRequest) (*IngestSpansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestSpans not implemented")
}
func (UnimplementedSpanServiceServer) mustEmbedUnimplementedSpanServiceServer() {}
func (UnimplementedSpanServiceServer) testEmbeddedByValue()                     {}

// UnsafeSpanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpanServiceServer will
// result in compilation errors.
type UnsafeSpanServiceServer interface {
	mustEmbedUnimplementedSpanServiceServer()
}

func RegisterSpanServiceServer(s grpc.ServiceRegistrar, srv SpanServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpanService_ServiceDesc, srv)
}

func _SpanService_IngestSpans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestSpansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpanServiceServer).IngestSpans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpanService_IngestSpans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpanServiceServer).IngestSpans(ctx, req.(*IngestSpansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpanService_ServiceDesc is the grpc.ServiceDesc for SpanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "betrace.v1.SpanService",
	HandlerType: (*SpanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestSpans",
			Handler:    _SpanService_IngestSpans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "betrace/v1/spans.proto",
}
