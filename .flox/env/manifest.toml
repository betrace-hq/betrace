## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
nodejs_20.pkg-path = "nodejs_20"
go_1_22.pkg-path = "go_1_22"
git.pkg-path = "git"
curl.pkg-path = "curl"
jq.pkg-path = "jq"
gum.pkg-path = "gum"
fswatch.pkg-path = "fswatch"
bc.pkg-path = "bc"
gopls.pkg-path = "gopls"
gotools.pkg-path = "gotools"
go-tools.pkg-path = "go-tools"
golangci-lint.pkg-path = "golangci-lint"
delve.pkg-path = "delve"
duckdb.pkg-path = "duckdb"
process-compose.pkg-path = "process-compose"
caddy.pkg-path = "caddy"
grafana.pkg-path = "grafana"
grafana-loki.pkg-path = "grafana-loki"
tempo.pkg-path = "tempo"
prometheus.pkg-path = "prometheus"

# Separate package group for potential conflicts
pyroscope.pkg-path = "pyroscope"
pyroscope.pkg-group = "observability-extras"

alloy.pkg-path = "grafana-alloy"
alloy.pkg-group = "observability-extras"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# Port configuration
FLUO_PORT_CADDY = "3000"
FLUO_PORT_FRONTEND = "12010"
FLUO_PORT_BACKEND = "12011"
FLUO_PORT_PROCESS_UI = "12013"
FLUO_PORT_GRAFANA = "12015"
FLUO_PORT_MCP_SERVER = "12016"

# Observability ports
FLUO_PORT_PROMETHEUS = "9090"
FLUO_PORT_LOKI = "3100"
FLUO_PORT_LOKI_GRPC = "9096"
FLUO_PORT_OTEL_GRPC = "4317"
FLUO_PORT_OTEL_HTTP = "4318"
FLUO_PORT_TEMPO = "3200"
FLUO_PORT_TEMPO_GRPC = "9095"
FLUO_PORT_PYROSCOPE = "4040"
FLUO_PORT_PYROSCOPE_GRPC = "9097"

# Test coverage thresholds
FLUO_COVERAGE_INSTRUCTION_MIN = "90"
FLUO_COVERAGE_BRANCH_MIN = "80"

# Go build configuration
GOFLAGS = "-mod=vendor"
CGO_ENABLED = "1"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
  echo "🎯 FLUO Development Environment"
  echo "=================================="
  echo ""
  echo "📁 Applications:"
  echo "  bff/         - React Frontend (Tanstack ecosystem)"
  echo "  backend-go/  - Go Backend (DuckDB + OTEL)"
  echo ""
  echo "🚀 Start Observability Stack:"
  echo "  flox services start"
  echo "  # Services: Loki, Tempo, Prometheus, Pyroscope, Alloy, Grafana"
  echo "  # Access Grafana: http://localhost:12015 (admin/admin)"
  echo "  # Services stay running while shell is active"
  echo ""
  echo "🔨 Development:"
  echo "  cd bff && npm run dev              - Frontend dev server"
  echo "  cd backend-go && go run ./cmd/fluo-backend - Backend dev"
  echo ""
  echo "🧪 Testing:"
  echo "  test-runner     - Run all tests"
  echo "  test-watch      - Continuous testing"
  echo "  serve-coverage  - View coverage reports"
  echo ""
  echo "💡 Tip: Keep this shell open to keep services running!"
  echo ""
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell specific profiles go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ----------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## -------------------------------------------------------------------
[services]

[services.loki]
command = """
  mkdir -p /tmp/loki/{chunks,rules}
  exec loki -config.file=$FLOX_ENV_PROJECT/.flox/configs/loki.yaml
"""

[services.tempo]
command = """
  mkdir -p /tmp/tempo/{traces,wal,generator/wal}
  exec tempo -config.file=$FLOX_ENV_PROJECT/.flox/configs/tempo.yaml
"""

[services.prometheus]
command = """
  mkdir -p /tmp/prometheus/data
  exec prometheus \
    --config.file=$FLOX_ENV_PROJECT/.flox/configs/prometheus.yaml \
    --storage.tsdb.path=/tmp/prometheus/data \
    --web.listen-address=:$FLUO_PORT_PROMETHEUS \
    --web.enable-lifecycle
"""

[services.pyroscope]
command = """
  mkdir -p /tmp/pyroscope/data
  exec pyroscope -config.file=$FLOX_ENV_PROJECT/.flox/configs/pyroscope.yaml
"""

[services.alloy]
command = """
  ALLOY_STORAGE=$(mktemp -d -p /tmp alloy-storage.XXXXXX)
  trap "rm -rf $ALLOY_STORAGE" EXIT
  export CUSTOM_STORAGE_PATH="$ALLOY_STORAGE"
  exec alloy run --disable-reporting $FLOX_ENV_PROJECT/.flox/configs/alloy.river
"""

[services.grafana]
command = """
  # Create persistent writable directories
  mkdir -p /tmp/grafana-data/{logs,plugins,db}

  # Symlink FLUO plugin if built
  PLUGIN_DIR="$FLOX_ENV_PROJECT/grafana-fluo-app/dist"
  if [ -d "$PLUGIN_DIR" ] && [ -f "$PLUGIN_DIR/plugin.json" ]; then
    ln -sf "$PLUGIN_DIR" /tmp/grafana-data/plugins/fluo-app
    echo "✅ FLUO plugin loaded from $PLUGIN_DIR"
  fi

  # Set Grafana paths - use absolute paths directly
  export GF_PATHS_DATA=/tmp/grafana-data/db
  export GF_PATHS_LOGS=/tmp/grafana-data/logs
  export GF_PATHS_PLUGINS=/tmp/grafana-data/plugins
  export GF_PATHS_PROVISIONING=$FLOX_ENV_PROJECT/.flox/configs/grafana-provisioning
  export GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=fluo-app

  # Create dashboards directory
  mkdir -p /tmp/grafana-dashboards
  if [ -d "$FLOX_ENV_PROJECT/grafana-dashboards" ]; then
    cp $FLOX_ENV_PROJECT/grafana-dashboards/*.json /tmp/grafana-dashboards/ 2>/dev/null || true
  fi

  exec grafana server \
    --homepath=$(dirname $(which grafana))/../share/grafana \
    --config $FLOX_ENV_PROJECT/.flox/configs/grafana.ini
"""


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
# Uncomment to disable CUDA detection.
# cuda-detection = false
