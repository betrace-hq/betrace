/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all active rules
         * @description Retrieve all active rules in the system
         */
        get: operations["getAllRules"];
        put?: never;
        /**
         * Create a new rule
         * @description Create a new behavioral assurance rule
         */
        post: operations["createRule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/{ruleId}/{version}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Activate a rule
         * @description Activate a specific rule version
         */
        put: operations["activateRule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/{ruleId}/{version}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Deactivate a rule
         * @description Deactivate a specific rule version
         */
        put: operations["deactivateRule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/{ruleId}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a rule
         * @description Logically delete a specific rule version
         */
        delete: operations["deleteRule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/stacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get rule stacks
         * @description Get all rule stacks (rules grouped by rule ID)
         */
        get: operations["getRuleStacks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rules/stacks/{ruleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific rule stack
         * @description Get all versions of a specific rule ID organized as a stack
         */
        get: operations["getRuleStack"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List signals
         * @description List signals with filtering and pagination
         */
        get: operations["listSignals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get signal details
         * @description Get detailed information about a specific signal
         */
        get: operations["getSignal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update signal status
         * @description Update the status of a specific signal
         */
        put: operations["updateSignalStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/{id}/incident-links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add incident link
         * @description Add an incident link to a signal
         */
        post: operations["addIncidentLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/{id}/badge.svg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate signal badge
         * @description Generate an SVG badge for a signal
         */
        get: operations["getSignalBadge"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/autocomplete/rule-ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get rule IDs for autocomplete
         * @description Get rule IDs for autocomplete functionality
         */
        get: operations["getRuleIds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/autocomplete/friendly-ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get friendly IDs for autocomplete
         * @description Get distinct friendly IDs for autocomplete functionality
         */
        get: operations["getFriendlyIds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/autocomplete/service-names": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get service names for autocomplete
         * @description Get distinct service names for autocomplete functionality
         */
        get: operations["getServiceNames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signals/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear all signals (dev only)
         * @description Clear all signals - only available in development mode
         */
        delete: operations["clearAllSignals"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/q/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Application health check
         * @description Check the health status of the application
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Prometheus metrics
         * @description Get Prometheus-formatted metrics
         */
        get: operations["getMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Rule: {
            /** @description Unique identifier for the rule */
            ruleId: string;
            /** @description Version of the rule */
            ruleVersion: string;
            /** @description OGNL expression defining the rule logic */
            ognlExpression: string;
            /** @description Human-readable description of the rule */
            description?: string;
            /**
             * @description Current status of the rule
             * @enum {string}
             */
            activeStatus: "ACTIVE" | "INACTIVE" | "DELETED";
            /**
             * Format: date-time
             * @description When the rule was created
             */
            createdDate?: string;
            /**
             * Format: date-time
             * @description When the rule was last modified
             */
            modifiedDate?: string;
        };
        CreateRuleRequest: {
            /** @description Unique identifier for the rule (lowercase, alphanumeric with hyphens) */
            ruleId: string;
            /** @description Version of the rule (auto-assigned if not provided) */
            ruleVersion?: string;
            /** @description OGNL expression defining the rule logic */
            ognlCondition: string;
            /** @description Human-readable description of the rule */
            description?: string;
        };
        RuleStack: {
            /** @description The rule identifier */
            ruleId: string;
            /** @description Latest ACTIVE version (or latest version if no ACTIVE) */
            topRule: components["schemas"]["Rule"];
            /** @description All versions sorted with ACTIVE first, then by version number desc */
            allVersions: components["schemas"]["Rule"][];
            /** @description Number of versions in the stack */
            totalVersions: number;
            /** @description Whether the stack should be displayed expanded */
            isExpanded: boolean;
        };
        RuleStacksResponse: {
            /** @description Map of ruleId to RuleStack objects */
            stacks: {
                [key: string]: components["schemas"]["RuleStack"];
            };
            /** @description Number of unique rule IDs */
            totalStacks: number;
            /** @description Total number of rules (all versions) */
            totalRules: number;
            /** @description Applied filter parameters */
            filters: {
                ruleId?: string;
                status?: string;
            };
        };
        Signal: {
            /** @description Database ID of the signal */
            signalDbId: string;
            /** @description Human-friendly identifier for the signal */
            humanFriendlyId?: string;
            /** @description OpenTelemetry trace ID */
            traceId: string;
            /** @description OpenTelemetry span ID */
            spanId: string;
            /** @description ID of the rule that triggered this signal */
            ruleId: string;
            /** @description Version of the rule that triggered this signal */
            ruleVersion: string;
            /**
             * @description Severity level of the signal
             * @enum {string}
             */
            severity: "ERROR" | "WARNING" | "INFO";
            /** @description Signal message */
            message?: string;
            /** @description Name of the source service */
            sourceServiceName?: string;
            /** @description Name of the source span */
            sourceSpanName?: string;
            /**
             * Format: date-time
             * @description When the signal was created
             */
            timestamp: string;
        };
        SignalMetadata: {
            /** @description Database ID of the signal this metadata belongs to */
            signalDbId: string;
            /**
             * @description Current status of the signal
             * @enum {string}
             */
            statusTag: "OPEN" | "INVESTIGATING" | "RESOLVED" | "FALSE_POSITIVE";
            /** @description Additional notes about the signal */
            notes?: string;
            /** @description Links to related incidents */
            incidentLinks?: string[];
            /**
             * Format: date-time
             * @description When the metadata was created
             */
            createdDate: string;
        };
        HealthCheck: {
            /**
             * @description Overall health status
             * @enum {string}
             */
            status: "UP" | "DOWN";
            /** @description Individual health check results */
            checks?: {
                name?: string;
                /** @enum {string} */
                status?: "UP" | "DOWN";
                data?: Record<string, never>;
            }[];
        };
        SuccessResponse: {
            /** @description Success message */
            message: string;
        };
        ErrorResponse: {
            /** @description Error type */
            error: string;
            /** @description Error message */
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllRules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of active rules */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Rule"][];
                };
            };
        };
    };
    createRule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRuleRequest"];
            };
        };
        responses: {
            /** @description Rule created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Rule"];
                };
            };
            /** @description Bad request - invalid rule data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Conflict - rule already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    activateRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The rule identifier */
                ruleId: string;
                /** @description The rule version */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rule activated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Rule not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deactivateRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The rule identifier */
                ruleId: string;
                /** @description The rule version */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rule deactivated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Rule not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The rule identifier */
                ruleId: string;
                /** @description The rule version */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rule deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse"];
                };
            };
            /** @description Rule not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getRuleStacks: {
        parameters: {
            query?: {
                /** @description Filter stacks by rule ID (partial, case-insensitive match) */
                ruleId?: string;
                /** @description Filter by rule status */
                status?: "ACTIVE" | "INACTIVE" | "DELETED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rule stacks retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RuleStacksResponse"];
                };
            };
        };
    };
    getRuleStack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The rule identifier */
                ruleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rule stack retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RuleStack"];
                };
            };
            /** @description Rule stack not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listSignals: {
        parameters: {
            query?: {
                /** @description Filter by rule ID */
                ruleId?: string;
                /** @description Filter by severity level */
                severity?: "ERROR" | "WARNING" | "INFO";
                /** @description Filter by human-friendly ID */
                humanFriendlyId?: string;
                /** @description Filter by service name */
                service?: string;
                /** @description Time range in hours */
                hours?: number;
                /** @description Maximum number of results */
                limit?: number;
                /** @description Number of results to skip */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signals retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    getSignal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The signal ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signal details retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Signal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateSignalStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The signal ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @enum {string} */
                    statusTag: "OPEN" | "INVESTIGATING" | "RESOLVED" | "FALSE_POSITIVE";
                };
            };
        };
        responses: {
            /** @description Signal status updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Signal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addIncidentLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The signal ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** Format: uri */
                    incidentLink: string;
                };
            };
        };
        responses: {
            /** @description Incident link added successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Signal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSignalBadge: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The signal ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SVG badge generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/svg+xml": string;
                };
            };
            /** @description Signal not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRuleIds: {
        parameters: {
            query?: {
                /** @description Search term for filtering rule IDs */
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rule IDs retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    getFriendlyIds: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Friendly IDs retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    getServiceNames: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service names retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    clearAllSignals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Signals cleared successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Forbidden - only available in dev mode */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
            /** @description Application is unhealthy */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
        };
    };
    getMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Metrics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
