/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TenantRouteImport } from './routes/tenant'
import { Route as SignalsRouteImport } from './routes/signals'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SecurityRouteImport } from './routes/security'
import { Route as RulesRouteImport } from './routes/rules'
import { Route as DocumentationRouteImport } from './routes/documentation'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AnalyticsRouteImport } from './routes/analytics'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SignalsIndexRouteImport } from './routes/signals.index'
import { Route as SignalsIdRouteImport } from './routes/signals.$id'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'

const TenantRoute = TenantRouteImport.update({
  id: '/tenant',
  path: '/tenant',
  getParentRoute: () => rootRouteImport,
} as any)
const SignalsRoute = SignalsRouteImport.update({
  id: '/signals',
  path: '/signals',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SecurityRoute = SecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => rootRouteImport,
} as any)
const RulesRoute = RulesRouteImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentationRoute = DocumentationRouteImport.update({
  id: '/documentation',
  path: '/documentation',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsRoute = AnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignalsIndexRoute = SignalsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SignalsRoute,
} as any)
const SignalsIdRoute = SignalsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => SignalsRoute,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/analytics': typeof AnalyticsRoute
  '/auth': typeof AuthRouteWithChildren
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRoute
  '/documentation': typeof DocumentationRoute
  '/rules': typeof RulesRoute
  '/security': typeof SecurityRoute
  '/settings': typeof SettingsRoute
  '/signals': typeof SignalsRouteWithChildren
  '/tenant': typeof TenantRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/signals/$id': typeof SignalsIdRoute
  '/signals/': typeof SignalsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/analytics': typeof AnalyticsRoute
  '/auth': typeof AuthRouteWithChildren
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRoute
  '/documentation': typeof DocumentationRoute
  '/rules': typeof RulesRoute
  '/security': typeof SecurityRoute
  '/settings': typeof SettingsRoute
  '/tenant': typeof TenantRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/signals/$id': typeof SignalsIdRoute
  '/signals': typeof SignalsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/analytics': typeof AnalyticsRoute
  '/auth': typeof AuthRouteWithChildren
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRoute
  '/documentation': typeof DocumentationRoute
  '/rules': typeof RulesRoute
  '/security': typeof SecurityRoute
  '/settings': typeof SettingsRoute
  '/signals': typeof SignalsRouteWithChildren
  '/tenant': typeof TenantRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/signals/$id': typeof SignalsIdRoute
  '/signals/': typeof SignalsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/analytics'
    | '/auth'
    | '/contact'
    | '/dashboard'
    | '/documentation'
    | '/rules'
    | '/security'
    | '/settings'
    | '/signals'
    | '/tenant'
    | '/auth/callback'
    | '/signals/$id'
    | '/signals/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/analytics'
    | '/auth'
    | '/contact'
    | '/dashboard'
    | '/documentation'
    | '/rules'
    | '/security'
    | '/settings'
    | '/tenant'
    | '/auth/callback'
    | '/signals/$id'
    | '/signals'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/analytics'
    | '/auth'
    | '/contact'
    | '/dashboard'
    | '/documentation'
    | '/rules'
    | '/security'
    | '/settings'
    | '/signals'
    | '/tenant'
    | '/auth/callback'
    | '/signals/$id'
    | '/signals/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AnalyticsRoute: typeof AnalyticsRoute
  AuthRoute: typeof AuthRouteWithChildren
  ContactRoute: typeof ContactRoute
  DashboardRoute: typeof DashboardRoute
  DocumentationRoute: typeof DocumentationRoute
  RulesRoute: typeof RulesRoute
  SecurityRoute: typeof SecurityRoute
  SettingsRoute: typeof SettingsRoute
  SignalsRoute: typeof SignalsRouteWithChildren
  TenantRoute: typeof TenantRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tenant': {
      id: '/tenant'
      path: '/tenant'
      fullPath: '/tenant'
      preLoaderRoute: typeof TenantRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signals': {
      id: '/signals'
      path: '/signals'
      fullPath: '/signals'
      preLoaderRoute: typeof SignalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/security': {
      id: '/security'
      path: '/security'
      fullPath: '/security'
      preLoaderRoute: typeof SecurityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documentation': {
      id: '/documentation'
      path: '/documentation'
      fullPath: '/documentation'
      preLoaderRoute: typeof DocumentationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signals/': {
      id: '/signals/'
      path: '/'
      fullPath: '/signals/'
      preLoaderRoute: typeof SignalsIndexRouteImport
      parentRoute: typeof SignalsRoute
    }
    '/signals/$id': {
      id: '/signals/$id'
      path: '/$id'
      fullPath: '/signals/$id'
      preLoaderRoute: typeof SignalsIdRouteImport
      parentRoute: typeof SignalsRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthCallbackRoute: typeof AuthCallbackRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCallbackRoute: AuthCallbackRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface SignalsRouteChildren {
  SignalsIdRoute: typeof SignalsIdRoute
  SignalsIndexRoute: typeof SignalsIndexRoute
}

const SignalsRouteChildren: SignalsRouteChildren = {
  SignalsIdRoute: SignalsIdRoute,
  SignalsIndexRoute: SignalsIndexRoute,
}

const SignalsRouteWithChildren =
  SignalsRoute._addFileChildren(SignalsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AnalyticsRoute: AnalyticsRoute,
  AuthRoute: AuthRouteWithChildren,
  ContactRoute: ContactRoute,
  DashboardRoute: DashboardRoute,
  DocumentationRoute: DocumentationRoute,
  RulesRoute: RulesRoute,
  SecurityRoute: SecurityRoute,
  SettingsRoute: SettingsRoute,
  SignalsRoute: SignalsRouteWithChildren,
  TenantRoute: TenantRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
