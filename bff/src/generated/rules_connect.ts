// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file rules.proto (package betrace.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateRuleRequest, DeleteRuleRequest, DeleteRuleResponse, DisableRuleRequest, EnableRuleRequest, GetRuleRequest, ListRulesRequest, ListRulesResponse, Rule, UpdateRuleRequest } from "./rules_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * RuleService manages BeTrace DSL rules
 *
 * @generated from service betrace.v1.RuleService
 */
export const RuleService = {
  typeName: "betrace.v1.RuleService",
  methods: {
    /**
     * ListRules returns all rules with optional filtering
     *
     * @generated from rpc betrace.v1.RuleService.ListRules
     */
    listRules: {
      name: "ListRules",
      I: ListRulesRequest,
      O: ListRulesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetRule returns a single rule by ID
     *
     * @generated from rpc betrace.v1.RuleService.GetRule
     */
    getRule: {
      name: "GetRule",
      I: GetRuleRequest,
      O: Rule,
      kind: MethodKind.Unary,
    },
    /**
     * CreateRule creates a new rule
     *
     * @generated from rpc betrace.v1.RuleService.CreateRule
     */
    createRule: {
      name: "CreateRule",
      I: CreateRuleRequest,
      O: Rule,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateRule updates an existing rule
     *
     * @generated from rpc betrace.v1.RuleService.UpdateRule
     */
    updateRule: {
      name: "UpdateRule",
      I: UpdateRuleRequest,
      O: Rule,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteRule deletes a rule
     *
     * @generated from rpc betrace.v1.RuleService.DeleteRule
     */
    deleteRule: {
      name: "DeleteRule",
      I: DeleteRuleRequest,
      O: DeleteRuleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * EnableRule enables a disabled rule
     *
     * @generated from rpc betrace.v1.RuleService.EnableRule
     */
    enableRule: {
      name: "EnableRule",
      I: EnableRuleRequest,
      O: Rule,
      kind: MethodKind.Unary,
    },
    /**
     * DisableRule disables an enabled rule
     *
     * @generated from rpc betrace.v1.RuleService.DisableRule
     */
    disableRule: {
      name: "DisableRule",
      I: DisableRuleRequest,
      O: Rule,
      kind: MethodKind.Unary,
    },
  }
} as const;

