/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TenantRouteImport } from './routes/tenant'
import { Route as SignalsRouteImport } from './routes/signals'
import { Route as SecurityRouteImport } from './routes/security'
import { Route as RulesRouteImport } from './routes/rules'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'

const TenantRoute = TenantRouteImport.update({
  id: '/tenant',
  path: '/tenant',
  getParentRoute: () => rootRouteImport,
} as any)
const SignalsRoute = SignalsRouteImport.update({
  id: '/signals',
  path: '/signals',
  getParentRoute: () => rootRouteImport,
} as any)
const SecurityRoute = SecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => rootRouteImport,
} as any)
const RulesRoute = RulesRouteImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/rules': typeof RulesRoute
  '/security': typeof SecurityRoute
  '/signals': typeof SignalsRoute
  '/tenant': typeof TenantRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/rules': typeof RulesRoute
  '/security': typeof SecurityRoute
  '/signals': typeof SignalsRoute
  '/tenant': typeof TenantRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/rules': typeof RulesRoute
  '/security': typeof SecurityRoute
  '/signals': typeof SignalsRoute
  '/tenant': typeof TenantRoute
  '/auth/callback': typeof AuthCallbackRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/auth'
    | '/dashboard'
    | '/rules'
    | '/security'
    | '/signals'
    | '/tenant'
    | '/auth/callback'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/auth'
    | '/dashboard'
    | '/rules'
    | '/security'
    | '/signals'
    | '/tenant'
    | '/auth/callback'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/auth'
    | '/dashboard'
    | '/rules'
    | '/security'
    | '/signals'
    | '/tenant'
    | '/auth/callback'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  RulesRoute: typeof RulesRoute
  SecurityRoute: typeof SecurityRoute
  SignalsRoute: typeof SignalsRoute
  TenantRoute: typeof TenantRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tenant': {
      id: '/tenant'
      path: '/tenant'
      fullPath: '/tenant'
      preLoaderRoute: typeof TenantRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signals': {
      id: '/signals'
      path: '/signals'
      fullPath: '/signals'
      preLoaderRoute: typeof SignalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/security': {
      id: '/security'
      path: '/security'
      fullPath: '/security'
      preLoaderRoute: typeof SecurityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthCallbackRoute: typeof AuthCallbackRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCallbackRoute: AuthCallbackRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRoute,
  RulesRoute: RulesRoute,
  SecurityRoute: SecurityRoute,
  SignalsRoute: SignalsRoute,
  TenantRoute: TenantRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
