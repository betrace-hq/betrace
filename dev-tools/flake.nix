{
  description = "FLUO Development Tools";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = nixpkgs.legacyPackages.${system};

        # Test TUI - Interactive test dashboard using Bubbletea
        testTui = pkgs.buildGoModule {
          pname = "fluo-test-tui";
          version = "0.1.7";
          src = ./test-tui;
          vendorHash = null; # Using vendored dependencies
          meta.mainProgram = "test-tui";
        };

        # Prompt Stats - Shell prompt integration
        promptStats = pkgs.writeShellScriptBin "prompt-stats" ''
          #!/usr/bin/env bash

          TEST_RESULT_DIR="/tmp/fluo-test-results"
          RESULTS_FILE="$TEST_RESULT_DIR/reports/summary.json"
          COVERAGE_FILE="$TEST_RESULT_DIR/coverage/summary.json"

          if [ ! -f "$RESULTS_FILE" ]; then
            exit 0
          fi

          TOTAL=$(${pkgs.jq}/bin/jq -r '.overall.total' "$RESULTS_FILE")
          PASSED=$(${pkgs.jq}/bin/jq -r '.overall.passed' "$RESULTS_FILE")
          FAILED=$(${pkgs.jq}/bin/jq -r '.overall.failed' "$RESULTS_FILE")

          # Get coverage if available
          if [ -f "$COVERAGE_FILE" ]; then
            INST_COV=$(${pkgs.jq}/bin/jq -r '.overall.instruction' "$COVERAGE_FILE")
          else
            INST_COV=0
          fi

          if [ "$TOTAL" -eq 0 ]; then
            exit 0
          fi

          if [ "$FAILED" -eq 0 ]; then
            printf "✅ %d/%d %.0f%%" "$PASSED" "$TOTAL" "$INST_COV"
          else
            printf "❌ %d/%d" "$FAILED" "$TOTAL"
          fi
        '';

        # Prompt Theme - ZSH theme for FLUO
        fluoPromptTheme = pkgs.writeTextFile {
          name = "fluo-prompt-theme.zsh";
          text = ''
            # FLUO Prompt Theme with Test Stats
            # Auto-generated by FLUO dev-tools

            fluo_git_info() {
              if git rev-parse --is-inside-work-tree &>/dev/null; then
                local branch
                branch=$(git branch --show-current 2>/dev/null)
                if [ -n "$branch" ]; then
                  echo " %{$fg[yellow]%}($branch)%{$reset_color%}"
                fi
              fi
            }

            fluo_test_stats() {
              local stats
              stats=$($HOME/.fluo-dev/prompt-stats.sh 2>/dev/null)
              if [ -n "$stats" ]; then
                echo " %{$fg[cyan]%}$stats%{$reset_color%}"
              fi
            }

            # Main prompt
            PROMPT='%{$fg[blue]%}%~%{$reset_color%}$(fluo_git_info)$(fluo_test_stats)
            %{$fg[magenta]%}➜%{$reset_color%} '

            # Right prompt (optional)
            # RPROMPT='%{$fg[gray]%}%*%{$reset_color%}'
          '';
        };

        # Setup Prompt - Install prompt theme and scripts
        setupPrompt = pkgs.writeShellScriptBin "setup-prompt" ''
          #!/usr/bin/env bash
          set -e

          FLUO_DEV_DIR="$HOME/.fluo-dev"
          mkdir -p "$FLUO_DEV_DIR"

          # Copy prompt stats script
          cp ${promptStats}/bin/prompt-stats "$FLUO_DEV_DIR/prompt-stats.sh"
          chmod +x "$FLUO_DEV_DIR/prompt-stats.sh"

          # Copy ZSH theme
          cp ${fluoPromptTheme} "$FLUO_DEV_DIR/fluo-prompt-theme.zsh"

          echo "✅ FLUO prompt theme installed to $FLUO_DEV_DIR"
          echo "Theme will be auto-loaded by .envrc when entering project directories"
        '';

      in {
        packages = {
          # Interactive test TUI
          test-tui = testTui;

          # Prompt components
          prompt-stats = promptStats;
          prompt-theme = fluoPromptTheme;
          setup-prompt = setupPrompt;

          # Default package
          default = testTui;
        };

        apps = {
          test-tui = flake-utils.lib.mkApp { drv = testTui; };
          setup-prompt = flake-utils.lib.mkApp { drv = setupPrompt; };
          default = flake-utils.lib.mkApp { drv = testTui; };
        };

        # Development shell with all tools
        devShells.default = pkgs.mkShell {
          packages = [
            testTui
            promptStats
            setupPrompt
          ];
        };
      }
    );
}
